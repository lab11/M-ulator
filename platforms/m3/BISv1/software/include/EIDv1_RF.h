//************************************************************
// Desciption: EIDv1 Register File Header File
//      Generated by genRF (Version 1.50) 06/02/2021 01:20:35
//************************************************************

//*******************************************************************************************
// This file has been modified as below
//  - Prefix eidv1 is replaced by eid
//  - Prefix EIDv1 is replaced by EID
//-------------------------------------------------------------------------------------------
//  Jun 23 2021 -   First commit 
//  Yejoong Kim (yejoong@cubeworks.io)
//*******************************************************************************************

#ifndef EIDV1_RF_H
#define EIDV1_RF_H

// Register 0x00
typedef union eid_r00{
  struct{
    unsigned EN_WATCHDOG		: 1;
    unsigned TMR_EN_CLK_DIV		: 1;
    unsigned TMR_EN_CLK_OUT		: 1;
  };
  uint32_t as_int;
} eid_r00_t;
#define EID_R00_DEFAULT {{0x0, 0x0, 0x0}}
#define EID_R00_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(eid_r00_t) == 4, "Punned Structure Size");

// Register 0x01
typedef union eid_r01{
  struct{
    unsigned TMR_RESETB_DCDC		: 1;
    unsigned TMR_EN_SELF_CLK		: 1;
    unsigned TMR_SELF_EN		: 1;
    unsigned TMR_RESETB_DIV		: 1;
    unsigned TMR_RESETB		: 1;
    unsigned TMR_SEL_LDO		: 1;
    unsigned TMR_EN_OSC		: 1;
    unsigned TMR_ISOL_CLK		: 1;
  };
  uint32_t as_int;
} eid_r01_t;
#define EID_R01_DEFAULT {{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}}
#define EID_R01_DEFAULT_AS_INT 0x000080
_Static_assert(sizeof(eid_r01_t) == 4, "Punned Structure Size");

// Register 0x02
typedef union eid_r02{
  struct{
    unsigned ECP_SEL_SEG_DIV		: 2;
    unsigned ECP_SEL_FD_DIV		: 2;
    unsigned ECP_SEL_TE_DIV		: 2;
    unsigned ECP_SEL_RING		: 2;
    unsigned ECP_PG_DIODE		: 1;
  };
  uint32_t as_int;
} eid_r02_t;
#define EID_R02_DEFAULT {{0x0, 0x0, 0x0, 0x0, 0x1}}
#define EID_R02_DEFAULT_AS_INT 0x000100
_Static_assert(sizeof(eid_r02_t) == 4, "Punned Structure Size");

// Register 0x03
typedef union eid_r03{
  struct{
    unsigned ECP_OVERRIDE		: 1;
  };
  uint32_t as_int;
} eid_r03_t;
#define EID_R03_DEFAULT {{0x0}}
#define EID_R03_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(eid_r03_t) == 4, "Punned Structure Size");

// Register 0x04
typedef union eid_r04{
  struct{
    unsigned ECP_EN_PD_SEG_OVR		: 9;
    unsigned ECP_EN_CLK_SEG_OVR		: 9;
    unsigned ECP_EN_PD_FD_OVR		: 1;
    unsigned ECP_EN_CLK_FD_OVR		: 1;
    unsigned ECP_EN_PD_TE_OVR		: 1;
    unsigned ECP_EN_CLK_TE_OVR		: 1;
    unsigned ECP_VIN_OVR		: 1;
    unsigned ECP_RESETB_OVR		: 1;
  };
  uint32_t as_int;
} eid_r04_t;
#define EID_R04_DEFAULT {{0x1FF, 0x000, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0}}
#define EID_R04_DEFAULT_AS_INT 0x1401FF
_Static_assert(sizeof(eid_r04_t) == 4, "Punned Structure Size");

// Register 0x05
typedef union eid_r05{
  struct{
    unsigned ECTR_IRQ_RPLY_REG_ADDR		: 8;
    unsigned ECTR_IRQ_RPLY_SHORT_ADDR		: 8;
    unsigned ECTR_IRQ_EN		: 1;
  };
  uint32_t as_int;
} eid_r05_t;
#define EID_R05_DEFAULT {{0x03, 0x10, 0x1}}
#define EID_R05_DEFAULT_AS_INT 0x011003
_Static_assert(sizeof(eid_r05_t) == 4, "Punned Structure Size");

// Register 0x06
// -- READ-ONLY --

// Register 0x07
typedef union eid_r07{
  struct{
    unsigned ECTR_PULSE_WIDTH		: 16;
  };
  uint32_t as_int;
} eid_r07_t;
#define EID_R07_DEFAULT {{0x0190}}
#define EID_R07_DEFAULT_AS_INT 0x000190
_Static_assert(sizeof(eid_r07_t) == 4, "Punned Structure Size");

// Register 0x08
typedef union eid_r08{
  struct{
    unsigned ECTR_EN_CP_CK_DEF		: 11;
    unsigned ECTR_EN_CP_PD_DEF		: 11;
    unsigned ECTR_VIN_CP_DEF		: 1;
    unsigned ECTR_RESETB_CP_DEF		: 1;
  };
  uint32_t as_int;
} eid_r08_t;
#define EID_R08_DEFAULT {{0x000, 0x7FF, 0x1, 0x0}}
#define EID_R08_DEFAULT_AS_INT 0x7FF800
_Static_assert(sizeof(eid_r08_t) == 4, "Punned Structure Size");

// Register 0x09
typedef union eid_r09{
  struct{
    unsigned ECTR_EN_CP_CK		: 11;
    unsigned ECTR_EN_CP_PD		: 11;
    unsigned ECTR_VIN_CP		: 1;
    unsigned ECTR_RESETB_CP		: 1;
  };
  uint32_t as_int;
} eid_r09_t;
#define EID_R09_DEFAULT {{0x000, 0x7FF, 0x1, 0x0}}
#define EID_R09_DEFAULT_AS_INT 0x7FF800
_Static_assert(sizeof(eid_r09_t) == 4, "Punned Structure Size");

// Register 0x0A
// -- EMPTY --

// Register 0x0B
// -- EMPTY --

// Register 0x0C
// -- EMPTY --

// Register 0x0D
// -- EMPTY --

// Register 0x0E
// -- EMPTY --

// Register 0x0F
// -- EMPTY --

// Register 0x10
typedef union eid_r10{
  struct{
    unsigned WCTR_THRESHOLD		: 24;
  };
  uint32_t as_int;
} eid_r10_t;
#define EID_R10_DEFAULT {{0x057E40}}
#define EID_R10_DEFAULT_AS_INT 0x057E40
_Static_assert(sizeof(eid_r10_t) == 4, "Punned Structure Size");

// Register 0x11
typedef union eid_r11{
  struct{
    unsigned WCTR_CR_ECP_SEL_SEG_DIV		: 2;
    unsigned WCTR_CR_ECP_SEL_FD_DIV		: 2;
    unsigned WCTR_CR_ECP_SEL_TE_DIV		: 2;
    unsigned WCTR_CR_ECP_SEL_RING		: 2;
    unsigned WCTR_CR_ECP_PG_DIODE_C1		: 1;
    unsigned WCTR_CR_ECP_PG_DIODE_C		: 1;
    unsigned WCTR_CR_ECP_PG_DIODE_B1		: 1;
    unsigned WCTR_CR_ECP_PG_DIODE_B		: 1;
    unsigned WCTR_CR_ECP_PG_DIODE_A1		: 1;
    unsigned WCTR_CR_ECP_PG_DIODE_A		: 1;
    unsigned WCTR_CR_ECP_PG_DIODE_A0		: 1;
  };
  uint32_t as_int;
} eid_r11_t;
#define EID_R11_DEFAULT {{0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}}
#define EID_R11_DEFAULT_AS_INT 0x007F00
_Static_assert(sizeof(eid_r11_t) == 4, "Punned Structure Size");

// Register 0x12
typedef union eid_r12{
  struct{
    unsigned WCTR_IDLE_WIDTH		: 16;
    unsigned WCTR_SEL_SEQ		: 3;
  };
  uint32_t as_int;
} eid_r12_t;
#define EID_R12_DEFAULT {{0x0190, 0x0}}
#define EID_R12_DEFAULT_AS_INT 0x000190
_Static_assert(sizeof(eid_r12_t) == 4, "Punned Structure Size");

// Register 0x13
typedef union eid_r13{
  struct{
    unsigned WCTR_PULSE_WIDTH		: 16;
  };
  uint32_t as_int;
} eid_r13_t;
#define EID_R13_DEFAULT {{0x0190}}
#define EID_R13_DEFAULT_AS_INT 0x000190
_Static_assert(sizeof(eid_r13_t) == 4, "Punned Structure Size");

// Register 0x14
typedef union eid_r14{
  struct{
    unsigned WCTR_EN_CP_CK_DEF		: 11;
    unsigned WCTR_EN_CP_PD_DEF		: 11;
    unsigned WCTR_VIN_CP_DEF		: 1;
    unsigned WCTR_RESETB_CP_DEF		: 1;
  };
  uint32_t as_int;
} eid_r14_t;
#define EID_R14_DEFAULT {{0x000, 0x7FF, 0x1, 0x0}}
#define EID_R14_DEFAULT_AS_INT 0x7FF800
_Static_assert(sizeof(eid_r14_t) == 4, "Punned Structure Size");

// Register 0x15
typedef union eid_r15{
  struct{
    unsigned WCTR_EN_CP_CK_A		: 11;
    unsigned WCTR_EN_CP_PD_A		: 11;
    unsigned WCTR_VIN_CP_A		: 1;
    unsigned WCTR_RESETB_CP_A		: 1;
  };
  uint32_t as_int;
} eid_r15_t;
#define EID_R15_DEFAULT {{0x000, 0x7FF, 0x1, 0x0}}
#define EID_R15_DEFAULT_AS_INT 0x7FF800
_Static_assert(sizeof(eid_r15_t) == 4, "Punned Structure Size");

// Register 0x16
typedef union eid_r16{
  struct{
    unsigned WCTR_EN_CP_CK_B		: 11;
    unsigned WCTR_EN_CP_PD_B		: 11;
    unsigned WCTR_VIN_CP_B		: 1;
    unsigned WCTR_RESETB_CP_B		: 1;
  };
  uint32_t as_int;
} eid_r16_t;
#define EID_R16_DEFAULT {{0x000, 0x7FF, 0x1, 0x0}}
#define EID_R16_DEFAULT_AS_INT 0x7FF800
_Static_assert(sizeof(eid_r16_t) == 4, "Punned Structure Size");

// Register 0x17
typedef union eid_r17{
  struct{
    unsigned WCTR_EN_CP_CK_C		: 11;
    unsigned WCTR_EN_CP_PD_C		: 11;
    unsigned WCTR_VIN_CP_C		: 1;
    unsigned WCTR_RESETB_CP_C		: 1;
  };
  uint32_t as_int;
} eid_r17_t;
#define EID_R17_DEFAULT {{0x000, 0x7FF, 0x1, 0x0}}
#define EID_R17_DEFAULT_AS_INT 0x7FF800
_Static_assert(sizeof(eid_r17_t) == 4, "Punned Structure Size");

// Register 0x18
// -- MEMORY-MAPPED --

// Register 0x19
typedef union eid_r19{
  struct{
    unsigned WCTR_FORCE_CRASH		: 16;
  };
  uint32_t as_int;
} eid_r19_t;
#define EID_R19_DEFAULT {{0x0000}}
#define EID_R19_DEFAULT_AS_INT 0x000000
_Static_assert(sizeof(eid_r19_t) == 4, "Punned Structure Size");

// Register 0x1A
// -- EMPTY --

// Register 0x1B
// -- EMPTY --

// Register 0x1C
// -- EMPTY --

// Register 0x1D
// -- EMPTY --

// Register 0x1E
// -- EMPTY --

// Register 0x1F
// -- EMPTY --

// Register 0x20
typedef union eid_r20{
  struct{
    unsigned LC_CLK_RING		: 2;
    unsigned LC_CLK_DIV		: 2;
  };
  uint32_t as_int;
} eid_r20_t;
#define EID_R20_DEFAULT {{0x1, 0x2}}
#define EID_R20_DEFAULT_AS_INT 0x000009
_Static_assert(sizeof(eid_r20_t) == 4, "Punned Structure Size");

#endif // EIDV1_RF_H
