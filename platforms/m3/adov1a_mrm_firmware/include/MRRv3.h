//************************************************************
// Desciption: MRRv3 Register File Header File
//      Generated by genRF 06/03/2016 19:12:20
//************************************************************

#ifndef MRRV3_RF_H
#define MRRV3_RF_H

// Register 0x00
typedef union mrrv3_r00{
  struct{
    unsigned MRR_CL_EN		: 1;
    unsigned MRR_CL_CTRL		: 6;
    unsigned MRR_TRX_CAP_ANTP_TUNE		: 14;
  };
  uint32_t as_int;
} mrrv3_r00_t;
#define MRRv3_R00_DEFAULT {{0x0, 0x08, 0x0000}}
_Static_assert(sizeof(mrrv3_r00_t) == 4, "Punned Structure Size");

// Register 0x01
typedef union mrrv3_r01{
  struct{
    unsigned MRR_TRX_CAP_ANTN_TUNE		: 14;
  };
  uint32_t as_int;
} mrrv3_r01_t;
#define MRRv3_R01_DEFAULT {{0x0000}}
_Static_assert(sizeof(mrrv3_r01_t) == 4, "Punned Structure Size");

// Register 0x02
typedef union mrrv3_r02{
  struct{
    unsigned MRR_TX_BIAS_TUNE		: 13;
    unsigned MRR_TX_EN_OW		: 1;
    unsigned MRR_TX_PULSE_FINE		: 1;
    unsigned MRR_TX_PULSE_FINE_TUNE		: 4;
  };
  uint32_t as_int;
} mrrv3_r02_t;
#define MRRv3_R02_DEFAULT {{0x0030, 0x0, 0x0, 0x7}}
_Static_assert(sizeof(mrrv3_r02_t) == 4, "Punned Structure Size");

// Register 0x03
typedef union mrrv3_r03{
  struct{
    unsigned MRR_RX_BIAS_TUNE		: 13;
    unsigned MRR_RX_EN_OW		: 1;
    unsigned MRR_RX_REC_RST_OW		: 1;
    unsigned MRR_RX_SAMPLE_CAP		: 3;
    unsigned MRR_DCP_S_OW		: 1;
    unsigned MRR_DCP_P_OW		: 1;
    unsigned MRR_TRX_ISOLATEN		: 1;
    unsigned MRR_RX_AMP_OW_EN		: 1;
  };
  uint32_t as_int;
} mrrv3_r03_t;
#define MRRv3_R03_DEFAULT {{0x0801, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
_Static_assert(sizeof(mrrv3_r03_t) == 4, "Punned Structure Size");

// Register 0x04
typedef union mrrv3_r04{
  struct{
    unsigned MRR_SCRO_EN_CLK		: 1;
    unsigned MRR_SCRO_EN_TIMER		: 1;
    unsigned MRR_SCRO_RSTN_TIMER		: 1;
    unsigned MRR_SCRO_AMP_I_LEVEL_SEL		: 6;
    unsigned MRR_SCRO_AMP_I_TC_SEL		: 3;
    unsigned MRR_SCRO_DIV_SEL		: 4;
    unsigned MRR_SCRO_I_LEVEL_SELB		: 7;
  };
  uint32_t as_int;
} mrrv3_r04_t;
#define MRRv3_R04_DEFAULT {{0x0, 0x0, 0x0, 0x33, 0x3, 0x8, 0x7A}}
_Static_assert(sizeof(mrrv3_r04_t) == 4, "Punned Structure Size");

// Register 0x05
typedef union mrrv3_r05{
  struct{
    unsigned MRR_SCRO_I_TC_SEL		: 3;
    unsigned MRR_SCRO_R_SEL		: 11;
    unsigned MRR_SCRO_VINHEE_SEL		: 3;
    unsigned MRR_SCRO_FREQ_DIV		: 2;
    unsigned MRR_EN_CLK_OVERRIDE		: 1;
    unsigned MRR_EN_CLK_MONITOR		: 1;
  };
  uint32_t as_int;
} mrrv3_r05_t;
#define MRRv3_R05_DEFAULT {{0x1, 0x4FF, 0x4, 0x0, 0x0, 0x0}}
_Static_assert(sizeof(mrrv3_r05_t) == 4, "Punned Structure Size");

// Register 0x06
typedef union mrrv3_r06{
  struct{
    unsigned MRR_RAD_FSM_TX_DATA_0		: 24;
  };
  uint32_t as_int;
} mrrv3_r06_t;
#define MRRv3_R06_DEFAULT {{0x000000}}
_Static_assert(sizeof(mrrv3_r06_t) == 4, "Punned Structure Size");

// Register 0x07
typedef union mrrv3_r07{
  struct{
    unsigned MRR_RAD_FSM_TX_DATA_1		: 24;
  };
  uint32_t as_int;
} mrrv3_r07_t;
#define MRRv3_R07_DEFAULT {{0x000000}}
_Static_assert(sizeof(mrrv3_r07_t) == 4, "Punned Structure Size");

// Register 0x08
typedef union mrrv3_r08{
  struct{
    unsigned MRR_RAD_FSM_TX_DATA_2		: 24;
  };
  uint32_t as_int;
} mrrv3_r08_t;
#define MRRv3_R08_DEFAULT {{0x000000}}
_Static_assert(sizeof(mrrv3_r08_t) == 4, "Punned Structure Size");

// Register 0x09
typedef union mrrv3_r09{
  struct{
    unsigned MRR_RAD_FSM_TX_DATA_3		: 24;
  };
  uint32_t as_int;
} mrrv3_r09_t;
#define MRRv3_R09_DEFAULT {{0x000000}}
_Static_assert(sizeof(mrrv3_r09_t) == 4, "Punned Structure Size");

// Register 0x0A
typedef union mrrv3_r0A{
  struct{
    unsigned MRR_RAD_FSM_TX_DATA_4		: 24;
  };
  uint32_t as_int;
} mrrv3_r0A_t;
#define MRRv3_R0A_DEFAULT {{0x000000}}
_Static_assert(sizeof(mrrv3_r0A_t) == 4, "Punned Structure Size");

// Register 0x0B
typedef union mrrv3_r0B{
  struct{
    unsigned MRR_RAD_FSM_TX_DATA_5		: 24;
  };
  uint32_t as_int;
} mrrv3_r0B_t;
#define MRRv3_R0B_DEFAULT {{0x000000}}
_Static_assert(sizeof(mrrv3_r0B_t) == 4, "Punned Structure Size");

// Register 0x0C
typedef union mrrv3_r0C{
  struct{
    unsigned MRR_RAD_FSM_TX_DATA_6		: 24;
  };
  uint32_t as_int;
} mrrv3_r0C_t;
#define MRRv3_R0C_DEFAULT {{0x000000}}
_Static_assert(sizeof(mrrv3_r0C_t) == 4, "Punned Structure Size");

// Register 0x0D
typedef union mrrv3_r0D{
  struct{
    unsigned MRR_RAD_FSM_TX_DATA_7		: 24;
  };
  uint32_t as_int;
} mrrv3_r0D_t;
#define MRRv3_R0D_DEFAULT {{0x000000}}
_Static_assert(sizeof(mrrv3_r0D_t) == 4, "Punned Structure Size");

// Register 0x0E
typedef union mrrv3_r0E{
  struct{
    unsigned MRR_RAD_FSM_SLEEP		: 1;
    unsigned MRR_RAD_FSM_RSTN		: 1;
    unsigned MRR_RAD_FSM_EN		: 1;
    unsigned MRR_RAD_FSM_TX_H_LEN		: 5;
    unsigned MRR_RAD_FSM_TX_D_LEN		: 8;
  };
  uint32_t as_int;
} mrrv3_r0E_t;
#define MRRv3_R0E_DEFAULT {{0x1, 0x0, 0x0, 0x1F, 0xC0}}
_Static_assert(sizeof(mrrv3_r0E_t) == 4, "Punned Structure Size");

// Register 0x0F
typedef union mrrv3_r0F{
  struct{
    unsigned MRR_RAD_FSM_TX_PW_LEN		: 10;
    unsigned MRR_RAD_FSM_TX_PS_LEN		: 10;
    unsigned MRR_RAD_FSM_TX_PR_LEN		: 3;
  };
  uint32_t as_int;
} mrrv3_r0F_t;
#define MRRv3_R0F_DEFAULT {{0x0F9, 0x1F3, 0x0}}
_Static_assert(sizeof(mrrv3_r0F_t) == 4, "Punned Structure Size");

// Register 0x10
typedef union mrrv3_r10{
  struct{
    unsigned MRR_RAD_FSM_TX_C_LEN		: 15;
    unsigned MRR_RAD_FSM_SEED		: 6;
    unsigned MRR_RAD_FSM_TX_MODE		: 3;
  };
  uint32_t as_int;
} mrrv3_r10_t;
#define MRRv3_R10_DEFAULT {{0x07CF, 0x01, 0x0}}
_Static_assert(sizeof(mrrv3_r10_t) == 4, "Punned Structure Size");

// Register 0x11
typedef union mrrv3_r11{
  struct{
    unsigned MRR_RAD_FSM_TX_CNST_LEN		: 2;
    unsigned MRR_RAD_FSM_GUARD_LEN		: 14;
    unsigned MRR_RAD_FSM_TX_POWERON_LEN		: 3;
    unsigned MRR_RAD_FSM_RX_POWERON_LEN		: 2;
    unsigned MRR_RAD_FSM_RX_SAMPLE_LEN		: 3;
  };
  uint32_t as_int;
} mrrv3_r11_t;
#define MRRv3_R11_DEFAULT {{0x0, 0x0000, 0x4, 0x0, 0x0}}
_Static_assert(sizeof(mrrv3_r11_t) == 4, "Punned Structure Size");

// Register 0x12
typedef union mrrv3_r12{
  struct{
    unsigned MRR_RAD_FSM_RX_HDR_BITS		: 6;
    unsigned MRR_RAD_FSM_RX_HDR_TH		: 6;
    unsigned MRR_RAD_FSM_RX_DATA_BITS		: 7;
    unsigned MRR_EN_DIG_MONITOR		: 1;
    unsigned MRR_RAD_FSM_TX_HDR_CNST		: 4;
  };
  uint32_t as_int;
} mrrv3_r12_t;
#define MRRv3_R12_DEFAULT {{0x08, 0x08, 0x20, 0x0, 0x8}}
_Static_assert(sizeof(mrrv3_r12_t) == 4, "Punned Structure Size");

// Register 0x13
typedef union mrrv3_r13{
  struct{
    unsigned MRR_DIG_MONITOR_SEL1		: 4;
    unsigned MRR_DIG_MONITOR_SEL2		: 4;
    unsigned MRR_DIG_MONITOR_SEL3		: 4;
  };
  uint32_t as_int;
} mrrv3_r13_t;
#define MRRv3_R13_DEFAULT {{0x0, 0x0, 0x0}}
_Static_assert(sizeof(mrrv3_r13_t) == 4, "Punned Structure Size");

// Register 0x14
// -- READ-ONLY --

// Register 0x15
// -- READ-ONLY --

// Register 0x16
// -- READ-ONLY --

// Register 0x17
// -- READ-ONLY --

// Register 0x18
// -- READ-ONLY --

// Register 0x19
// -- READ-ONLY --

// Register 0x1A
// -- READ-ONLY --

// Register 0x1B
typedef union mrrv3_r1B{
  struct{
    unsigned MRR_IRQ_REPLY_PACKET		: 24;
  };
  uint32_t as_int;
} mrrv3_r1B_t;
#define MRRv3_R1B_DEFAULT {{0x001400}}
_Static_assert(sizeof(mrrv3_r1B_t) == 4, "Punned Structure Size");

// Register 0x1C
typedef union mrrv3_r1C{
  struct{
    unsigned LC_CLK_RING		: 2;
    unsigned LC_CLK_DIV		: 2;
  };
  uint32_t as_int;
} mrrv3_r1C_t;
#define MRRv3_R1C_DEFAULT {{0x1, 0x2}}
_Static_assert(sizeof(mrrv3_r1C_t) == 4, "Punned Structure Size");

#endif // MRRV3_RF_H